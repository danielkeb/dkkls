generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id          String       @id @default(auto()) @map("_id") @db.ObjectId
  username    String
  email       String       @unique
  password    String
  role        String?
  bio         String?
  avatar      String?
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  // Relations
  courses     Course[]
  enrollments Enrollment[]
  reviews     Review[]
  discussions Discussion[]
  replies     Reply[]
  wishlist    Wishlist[]
  Payment     Payment[]
}

model Course {
  id          String           @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  description String
  price       Float
  thumbnail   String?
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
  // Relations
  userId      String           @db.ObjectId
  user        User             @relation(fields: [userId], references: [id])
  categories  CourseCategory[]
  enrollments Enrollment[]
  reviews     Review[]
  discussions Discussion[]
  wishlist    Wishlist[]
  Payment     Payment[]
  Lessons      Lesson[]
}

model Lesson {
  id          String           @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  content     String           // This could be text, markdown, etc.
  videoUrl    String?          // URL to the video, if any
  duration    Int?             // Duration of the lesson in minutes
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
  // Relations
  courseId    String           @db.ObjectId
  course      Course           @relation(fields: [courseId], references: [id])
}

model Category {
  id      String           @id @default(auto()) @map("_id") @db.ObjectId
  name    String
  courses CourseCategory[]
}

model CourseCategory {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  courseId   String   @db.ObjectId
  categoryId String   @db.ObjectId
  course     Course   @relation(fields: [courseId], references: [id])
  category   Category @relation(fields: [categoryId], references: [id])
}

model Enrollment {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  userId    String   @db.ObjectId
  courseId  String   @db.ObjectId
  user      User     @relation(fields: [userId], references: [id])
  course    Course   @relation(fields: [courseId], references: [id])
  status    String
  createdAt DateTime @default(now())
}

model Review {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  rating    Int
  comment   String
  userId    String   @db.ObjectId
  courseId  String   @db.ObjectId
  user      User     @relation(fields: [userId], references: [id])
  course    Course   @relation(fields: [courseId], references: [id])
  createdAt DateTime @default(now())
}

model Wishlist {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  userId    String   @db.ObjectId
  courseId  String   @db.ObjectId
  user      User     @relation(fields: [userId], references: [id])
  course    Course   @relation(fields: [courseId], references: [id])
  createdAt DateTime @default(now())
}

model Discussion {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  title     String
  content   String
  userId    String   @db.ObjectId
  courseId  String   @db.ObjectId
  user      User     @relation(fields: [userId], references: [id])
  course    Course   @relation(fields: [courseId], references: [id])
  createdAt DateTime @default(now())
  replies   Reply[]
}

model Reply {
  id           String     @id @default(auto()) @map("_id") @db.ObjectId
  content      String
  userId       String     @db.ObjectId
  discussionId String     @db.ObjectId
  user         User       @relation(fields: [userId], references: [id])
  discussion   Discussion @relation(fields: [discussionId], references: [id])
  createdAt    DateTime   @default(now())
}

model Payment {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  userId    String   @db.ObjectId
  courseId  String   @db.ObjectId
  amount    Float
  status    String
  user      User     @relation(fields: [userId], references: [id])
  course    Course   @relation(fields: [courseId], references: [id])
  createdAt DateTime @default(now())
}
